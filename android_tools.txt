1.keytool用法

	keytool -genkey -alias archermind.keystore -keyalg RSA -validity 20000 -keystore archermind.keystore

    查看apk的签名，解压apk, META-INF 目录中的CERT.RSA存放签名信息
    keytool -printcert -file CERT.RSA

    会看到,下面信息
        证书指纹:
        MD5:8D:DB:34:2F:2D:A5:40:84:02:D7:56:8A:F2:1E:29:F9
        SHA1:27:19:6E:38:6B:87:5E:76:AD:F7:00:E7:EA:84:E4:C6:EE:E3:3D:FA
        签名算法名称:MD5withRSA
        版本: 3

    源码路径下build/target/product/security
    platform 查看   keytool -printcert -v -file platform.x509.pem
    share 查看      keytool -printcert -v -file share.x509.pem

    给apk用系统签名
    java -jar ./out/host/linux-x86/framework/signapk.jar ./build/target/product/security/platform.x509.pem ./build/target/product/security/platform.pk8 DMClient.apk.unsigned DMClient.apk.signed

    或用下面Android.mk

    LOCAL_PATH := $(call my-dir)
    include $(CLEAR_VARS)

    # Module name should match apk name to be installed
    LOCAL_MODULE := CarDvr_kfl
    LOCAL_MODULE_TAGS := optional
    LOCAL_SRC_FILES := $(LOCAL_MODULE).apk
    LOCAL_MODULE_CLASS := APPS
    LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)
    LOCAL_CERTIFICATE := PRESIGNED
    LOCAL_MODULE_PATH := $(TARGET_OUT)/vendor/operator/app
    #LOCAL_CERTIFICATE := platform
    #LOCAL_PRIVILEGED_MODULE := true
    LOCAL_MULTILIB := 32
    include $(BUILD_PREBUILT)



2.android create project

  Creates a new Android project.
	Options:
	  -n --name    : Project name.
	  -t --target  : Target ID of the new project. [required]//目标平台版本
	  -p --path    : The new project's directory. [required]//project目录
	  -k --package : Android package name for the application. [required]
	  -a --activity: Name of the default Activity that is created. [required]

	android create project -n TestApp -p ./TestApp -k com.android.testapp -a MainActivity -t 8



3.ant	命令
	在ant.properties文件中添加
	key.store=archermind.keystore
	key.alias=archermind.keystore
	key.store.password=archermind
	key.alias.password=archermind
	在project根目录下执行ant relaese
	既可以在project/bin/***-release.apk

	help:
	     [echo] Android Ant Build. Available targets:
	     [echo]    help:      Displays this help.
	     [echo]    clean:     Removes output files created by other targets.
	     [echo]               The 'all' target can be used to clean dependencies
	     [echo]               (tested projects and libraries)at the same time
	     [echo]               using: 'ant all clean'
	     [echo]    debug:     Builds the application and signs it with a debug key.
	     [echo]               The 'nodeps' target can be used to only build the
	     [echo]               current project and ignore the libraries using:
	     [echo]               'ant nodeps debug'
	     [echo]    release:   Builds the application. The generated apk file must be
	     [echo]               signed before it is published.
	     [echo]               The 'nodeps' target can be used to only build the
	     [echo]               current project and ignore the libraries using:
	     [echo]               'ant nodeps release'
	     [echo]    instrument:Builds an instrumented package and signs it with a
	     [echo]               debug key.
	     [echo]    test:      Runs the tests. Project must be a test project and
	     [echo]               must have been built. Typical usage would be:
	     [echo]                   ant [emma] debug install test
	     [echo]    emma:      Transiently enables code coverage for subsequent
	     [echo]               targets.
	     [echo]    install:   Installs the newly build package. Must either be used
	     [echo]               in conjunction with a build target (debug/release/
	     [echo]               instrument) or with the proper suffix indicating
	     [echo]               which package to install (see below).
	     [echo]               If the application was previously installed, the
	     [echo]               application is reinstalled if the signature matches.
	     [echo]    installd:  Installs (only) the debug package.
	     [echo]    installr:  Installs (only) the release package.
	     [echo]    installi:  Installs (only) the instrumented package.
	     [echo]    installt:  Installs (only) the test and tested packages (unless
	     [echo]               nodeps is used as well.
	     [echo]    uninstall: Uninstalls the application from a running emulator or
	     [echo]               device. Also uninstall tested package if applicable
	     [echo]               unless 'nodeps' is used as well.


4 jdk	jarsigner
	用法：jarsigner [选项] jar 文件别名
       jarsigner -verify [选项] jar 文件

	[-keystore <url>]           密钥库位置

	[-storepass <口令>]         用于密钥库完整性的口令

	[-storetype <类型>]         密钥库类型

	[-keypass <口令>]           专用密钥的口令（如果不同）

	[-sigfile <文件>]           .SF/.DSA 文件的名称

	[-signedjar <文件>]         已签名的 JAR 文件的名称

	[-digestalg <算法>]    摘要算法的名称

	[-sigalg <算法>]       签名算法的名称

	[-verify]                   验证已签名的 JAR 文件

	[-verbose]                  签名/验证时输出详细信息

	[-certs]                    输出详细信息和验证时显示证书

	[-tsa <url>]                时间戳机构的位置

	[-tsacert <别名>]           时间戳机构的公共密钥证书

	[-altsigner <类>]           替代的签名机制的类名

	[-altsignerpath <路径列表>] 替代的签名机制的位置

	[-internalsf]               在签名块内包含 .SF 文件

	[-sectionsonly]             不计算整个清单的散列

	[-protected]                密钥库已保护验证路径

	[-providerName <名称>]      提供者名称

	[-providerClass <类>        加密服务提供者的名称
	[-providerArg <参数>]] ... 主类文件和构造函数参数


	（1）验证签名是否成功
	jarsigner -verify ./bin/TestApp-release.apk
	jar 已验证。

5. dumpsys
    查看dumpsys 支持的参数
    adb shell dumpsys | grep "DUMP OF SERVICE"

    打印audiopolicy相关配置
    adb shell dumpsys media.audio_policy
    adb shell dumpsys media.audio_flinger

    example:
        dumpsys activty  打印系统activity信息
        dumpsys meminfo  打印内存信息

6. aapt
    aapt d badging file
    查看apk的包名和主activity名等基本信息

7. 获取当前系统应用app可获取内存的大小
    adb shell  getprop | grep dalvik.vm.heapgrowthlimit

9. adb wifi
    1) 先usb adb root
    2) 车机连接wifi，查看IP，保证电脑跟车机在同一个网段
    3) 车机的usb可以做host。
        adb tcpip 5555
        adb connect ip

10. 更新ramdisk.gz
        ramdisk解压替换打包

        1) gunzip ramdisk.gz

        2) mkdir /tmp/rootfs

        3) mount -t ext4 -o loop ramdisk /tmp/rootfs

        4) cd /tmp/rootfs 替换修改内容

        5) genext2fs -b 2048 -i 1024 -d /tmp/rootfs ramdisk

        6) gzip -9 -f ramdisk


11. 替换update.zip内容

    修改update之后压缩
    zip ../update_unsigned.zip -qry ./*

    java -Xmx1024m -jar ./out/host/linux-x86/framework/signapk.jar -w ./build/target/product/security/testkey.x509.pem ./build/target/product/security/testkey.pk8 update_unsigned.zip update.zip


11 解压system.img.ext4
    1) simg2img ~/Desktop/system.img.ext4 /tmp/system.img
    将system.img.ext4 解压到/tmp/system.img
    2) mkdir /tmp/img
    3) sudo mount –o loop -t ext4 /tmp/system.img /tmp/img
    system.img挂载到img
    4) 修改/tmp/img/内容后从新打包
    ./make_ext4fs -s -l 45M bootlogo.img.ext4 /tmp/img/

12  查看应用内存使用情况
    adb shell procrank > /tmp/log.txt

13 查看应用打开文件情况
    adb shell lsof > /tmp/log.txt

14 fastboot烧录
    烧录kernel
    sudo fastboot flash kernel Image
    或
    dd if=/data/Image of=/dev/block/kernel

    烧录ramdisk
    sudo fastboot flash ramdisk.gz rootfs 
    或
    dd if=/data/ramdisk.gz of=/dev/block/rootfs

15 显示当前有哪些服务在运行 
    adb shell service list

16 adb shell dumpsys media.audio_policy
Output refcount可以确认当前音频的stream类型 

17 gradle 安装
curl -s "https://get.sdkman.io" | bash
sdk install gradle 5.0


18 idmap
源码 frameworks/base/cmds/idmap
adb shell idmap --help

NAME
      idmap - create or display idmap files

SYNOPSIS 
      idmap --help 
      idmap --fd target overlay fd 
      idmap --path target overlay idmap 
      idmap --scan target-package-name-to-look-for path-to-target-apk dir-to-hold-idmaps \                   dir-to-scan [additional-dir-to-scan [additional-dir-to-scan [...]]]
      idmap --inspect idmap 
      idmap --verify target overlay fd 

DESCRIPTION 
      Idmap files play an integral part in the runtime resource overlay framework. An idmap 
      file contains a mapping of resource identifiers between overlay package and its target 
      package; this mapping is used during resource lookup. Idmap files also act as control 
      files by their existence: if not present, the corresponding overlay package is ignored 
      when the resource context is created. 

      Idmap files are stored in /data/resource-cache. For each pair (target package, overlay 
      package), there exists exactly one idmap file, or none if the overlay should not be used. 

NOMENCLATURE 
      target: the original, non-overlay, package. Each target package may be associated with 
              any number of overlay packages. 

      overlay: an overlay package. Each overlay package is associated with exactly one target 
               package, specified in the overlay's manifest using the <overlay target="..."/> 
               tag. 

OPTIONS 
      --help: display this help 

      --fd: create idmap for target package 'target' (path to apk) and overlay package 'overlay' 
            (path to apk); write results to file descriptor 'fd' (integer). This invocation 
            version is intended to be used by a parent process with higher privileges to call 
            idmap in a controlled way: the parent will open a suitable file descriptor, fork, 
            drop its privileges and exec. This tool will continue execution without the extra 
            privileges, but still have write access to a file it could not have opened on its 
            own. 

      --path: create idmap for target package 'target' (path to apk) and overlay package 
              'overlay' (path to apk); write results to 'idmap' (path). 

      --scan: non-recursively search directory 'dir-to-scan' (path) for static overlay packages 
              with target package 'target-package-name-to-look-for' (package name) present at
              'path-to-target-apk' (path to apk). For each overlay package found, create an
              idmap file in 'dir-to-hold-idmaps' (path). 

      --inspect: decode the binary format of 'idmap' (path) and display the contents in a 
                 debug-friendly format. 

      --verify: verify if idmap corresponding to file descriptor 'fd' (integer) is made from 
                target package 'target' (path to apk) and overlay package 'overlay'. 

EXAMPLES 
      Create an idmap file: 

      $ adb shell idmap --path /system/app/target.apk \ 
                               /vendor/overlay/overlay.apk \ 
                               /data/resource-cache/vendor@overlay@overlay.apk@idmap 

      Display an idmap file: 

      $ adb shell idmap --inspect /data/resource-cache/vendor@overlay@overlay.apk@idmap 
      SECTION      ENTRY        VALUE      COMMENT 
      IDMAP HEADER magic        0x706d6469 
                   base crc     0xb65a383f 
                   overlay crc  0x7b9675e8 
                   base path    .......... /path/to/target.apk 
                   overlay path .......... /path/to/overlay.apk 
      DATA HEADER  target pkg   0x0000007f 
                   types count  0x00000003 
      DATA BLOCK   target type  0x00000002 
                   overlay type 0x00000002 
                   entry count  0x00000001 
                   entry offset 0x00000000 
                   entry        0x00000000 drawable/drawable 
      DATA BLOCK   target type  0x00000003 
                   overlay type 0x00000003 
                   entry count  0x00000001 
                   entry offset 0x00000000 
                   entry        0x00000000 xml/integer 
      DATA BLOCK   target type  0x00000004 
                   overlay type 0x00000004 
                   entry count  0x00000001 
                   entry offset 0x00000000 
                   entry        0x00000000 raw/lorem_ipsum 

      In this example, the overlay package provides three alternative resource values:
      drawable/drawable, xml/integer, and raw/lorem_ipsum 

NOTES 
      This tool and its expected invocation from installd is modelled on dexopt.

19 getevent

adb shell getevent -l
查看input事件
得到的是这样一组信息
EV_KEY       BTN_TOUCH            DOWN                
EV_ABS       ABS_MT_TOUCH_MAJOR   000000ff            
EV_ABS       ABS_MT_POSITION_X    00000262            
EV_ABS       ABS_MT_POSITION_Y    00000546            
EV_ABS       ABS_MT_TRACKING_ID   00000011            
EV_SYN       SYN_MT_REPORT        00000000            
EV_SYN       SYN_REPORT           00000000            
EV_KEY       BTN_TOUCH            UP                  
EV_SYN       SYN_MT_REPORT        00000000            
EV_SYN       SYN_REPORT           00000000

格式是event type、event code、event value 
具体含义查看kernel/include/linux/input.h
或着kernel/include/uapi/linux/input-event-codes.h

event type 常用的有
EV_REL表示相对坐标类型、EV_ABS表示绝对坐标类型、EV_KEY表示物理键盘事件类型，EV_SYN表示同步事件类型等等

event code 

20 android 加快编译,但mk修改之后还是需要用mm编译
./prebuilts/build-tools/linux-x86/bin/ninja
ninja -f ./out/combined-car_mt2712.ninja Launcher3
或者 (缺省-f参数时,用的是当前目录的build.ninja)
# ln -s ./out/combined-car_mt2712.ninja build.ninja
# ninja Settings

make编译完一个项目后，如果再执行make，会花费较长时间重新编译部分内容，
而使用Ninja以后，增量编译做得比较完善


21  制造app crash
adb shell am crash packagname
比如音乐的crash
adb shell am crash com.imotor.music
app会crash且log中会有如下log

--------- beginning of crash
04-26 00:59:06.901  4253  4253 E AndroidRuntime: FATAL EXCEPTION: main 
04-26 00:59:06.901  4253  4253 E AndroidRuntime: Process: com.imotor.music, PID: 4253 
04-26 00:59:06.901  4253  4253 E AndroidRuntime: android.app.RemoteServiceException: shell-induced crash
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1737)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at android.os.Handler.dispatchMessage(Handler.java:106)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at android.os.Looper.loop(Looper.java:193)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at android.app.ActivityThread.main(ActivityThread.java:6669)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at java.lang.reflect.Method.invoke(Native Method)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
04-26 00:59:06.901  4253  4253 E AndroidRuntime:    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java


