bash的内部命令
 bash命令解释套装程序包含 了一些内部命令。内部命令在目录列表时是看不见的，它们由Shell本身提供。常用的内部命令有：echo, eval, exec, export, readonly, read, shift, wait和点(.)。下面简单介绍其命令格式和功能。
　　1．echo 
　　命令格式：echo arg
　　功能：在屏幕上显示出由arg指定的字串。
　　2．eval
　　命令格式：eval args
　　功能：当Shell程序执行到eval语句时，Shell读入参数args，并将它们组合成一个新的命令，然后执行。
　　3．exec
　　命令格式：exec命令参数
　　功能：当Shell执行到exec语句时，不会去创建新的子进程，而是转去执行指定的命令，当指定的命令执行完时，该进程（也就是最初的Shell）就终止了，所以Shell程序中exec后面的语句将不再被执行。
　　4．export
　　命令格式：export变量名或：export变量名=变量值
　　功能：Shell可以用export把它的变量向下带入子Shell，从而让子进程继承父进程中的环境变量。但子Shell不能用export把它的变量向上带入父Shell。
　　注意：不带任何变量名的export语句将显示出当前所有的export变量。
　　5．readonly
　　命令格式：readonly变量名
　　功能：将一个用户定义的Shell变量标识为不可变。不带任何参数的readonly命令将显示出所有只读的Shell变量。
　　6．read
　　命令格式：read变量名表
　　功能：从标准输入设备读入一行，分解成若干字，赋值给Shell程序内部定义的变量。
　　7．shift语句
　　功能：shift语句按如下方式重新命名所有的位置参数变量，即$2成为$1，$3成为$2…在程序中每使用一次shift语句，都使所有的位置参数依次向左移动一个位置，并使位置参数$#减1，直到减到0为止。
　　8．wait
　　功能：使Shell等待在后台启动的所有子进程结束。wait的返回值总是真。
　　9．exit
　　功能：退出Shell程序。在exit之后可有选择地指定一个数位作为返回状态。
　　10．“.”（点）
　　命令格式：. Shell程序文件名
　　功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句。


2. Shell Prompt	shell提示符号
	$	普通用户	
	#	root用户(sudo su)
   Carrige Return	回车(由Enter键产生)

	IFS(Internal Field Seperator)
		其可以由一个或多个以下字符组成
			空白鍵(White Space)
			表格鍵(Tab)
			回車鍵(Enter)
	shell 會依據 IFS(Internal Field Seperator) 將 command line所輸入的文字給拆解為"字段"(word)。然後再針對特殊字符(meta)先作處理，最後再重組整行 command line 。
	
	bash 中常用的引用有以下三种
	''	单引号	所有meta字符都被屏蔽
	""	双引号	在 soft quoe 中大部份 meta 都會被關閉，但某些則保留(如 $ )
	\	反斜线	只有緊接在 escape (跳脫字符)之後的單一 meta 才被關閉。
		A=B\ C	echo 之后显示 B C因为跟在B之后的空格被\关闭了
	注:常用的 meta 
	IFS：由 <space> 或 <tab> 或 <enter> 三者之一組成(我們常用 space )。
	CR：由 <enter> 產生。
	= ： 設定變量。
	$ ： 作變量或運算替換(請不要與 shell prompt 搞混了)。
	> ：重導向 stdout。
	< ：重導向 stdin。
	|：命令管線。
	& ：重導向 file descriptor ，或將命令置於背境執行。
	( )：將其內的命令置於 nested subshell 執行，或用於運算或命令替換。
	{ }：將其內的命令置於 non-named function 中執行，或用在變量替換的界定範圍。
	; ：在前一個命令結束時，而忽略其返回值，繼續執行下一個命令。
	&& ：在前一個命令結束時，若返回值為 true，繼續執行下一個命令。
	|| ：在前一個命令結束時，若返回值為 false，繼續執行下一個命令。
	!：執行 history 列表中的命令

	(){}区别
	通常而言，若所作的修改是臨時的，且不想影響原有或以後的設定，那我們就nested sub-shell ，反之，則用 non-named command group 。



我们可以使用任意一种文字编辑器，比如gedit、kedit、emacs、vi等来编写shell脚本，它必须以如下行开始（必须放在文件的第一行）：

#!/bin/bash
...

注意：最好使用“!/bin/bash”而不是“!/bin/sh”，如果使用tc shell改为tcsh，其他类似。

符号#!用来告诉系统执行该脚本的程序，本例使用/bin/bash。编辑结束并保存后，如果要执行该脚本，必须先使其可执行：

chmod +x filename

此后在该脚本所在目录下，输入 ./filename 即可执行该脚本。


目录
[隐藏]
1 变量赋值和引用
2 Shell里的流程控制
2.1 if 语 句
2.2 && 和 || 操作符
2.3 case 语句
2.4 select 语句
2.5 while/for 循环
3 Shell里的一些特殊符号
3.1 引号
4 Here Document
5 Shell里的函数
6 命令行参数
7 Shell脚本示例
7.1 一般编程步骤
7.2 二进制到十进制的转换
7.3 文件循环拷贝
8 脚本调试



 变量赋值和引用
Shell编程中，使用变量无需事先声明，同时变量名的命名须遵循如下规则：

首个字符必须为字母（a-z，A-Z） 或者_
中间不能有空格，可以使用下划线（_）
不能使用其他标点符号
變量名稱長度不可超過 256 個字母。
變量名稱及變量值之大小寫是有區別的(case sensitive)。
需要给变量赋值时，可以这么写：

变量名=值 

等號左右兩邊不能使用區隔符號(IFS)，也應避免使用 shell 的保留字元(metacharactor)
要取用一个变量的值，只需在变量名前面加一个$ ( 注意: 给变量赋值的时候，不能在"="两边留空格 )

我們在當前 shell 中所定義的變量，均屬於"本地變量"(local variable)，只有經過 export 命令的"輸出"處理，才能成為環境變量(environment variable)


#!/bin/bash
# 对变量赋值：
a="hello world"  #等号两边均不能有空格存在

pwd= /bin/pwd		#将执行pwd	
# 打印变量a的值：
echo "A is:" $a

挑个自己喜欢的编辑器，输入上述内容，并保存为文件first，然后执行 chmod +x first 使其可执行，最后输入 ./first 执行该脚本。其输出结果如下： 

A is: hello world

有时候变量名可能会和其它文字混淆，比如：

num=2
echo "this is the $numnd"

上述脚本并不会输出"this is the 2nd"而是"this is the "；这是由于shell会去搜索变量numnd的值，而实际上这个变量此时并没有值。这时，我们可以用花括号来告诉shell要打印的是num变量：

num=2
echo "this is the ${num}nd"

其输出结果为：this is the 2nd


注意花括号的位置：

num=2
echo "this is the {$num}nd"

其输出结果为：this is the {2}nd

A=		设置A为null
unset A	A不存在



需要注意shell的默认赋值是字符串赋值。比如：

var=1
var=$var+1
echo $var
打印出来的不是2而是1＋1。为了达到我们想要的效果有以下几种表达方式：

let "var+=1"
let "var=$var + 1"
var="$[$var+1]"
((var++))
var=$(($var+1))
var="$(expr "$var" + 1)" #不建议使用
var="`expr "$var" + 1`" #强烈不建议使用，注意加号两边的空格，否则还是按照字符串的方式赋值,`为Esc下方的`，而不是单引号'。
var=`expr &var + 1`
注意：前2种方式在bash下有效，在sh下会出错。

let表示数学运算，expr用于整数值运算，每一项用空格隔开，$[]将中括号内的表达式作为数学运算先计算结果再输出。

Shell脚本中有许多变量是系统自动设定的，我们将在用到这些变量时再作说明。除了只在脚本内有效的普通shell变量外，还有环境变量，即那些由export关键字处理过的变量。本文不讨论环境变量，因为它们一般只在登录脚本中用到。





 Shell里的流程控制
 if 语 句
"if"表达式如果条件为真，则执行then后的部分:

if ....; then
  ....
elif ....; then
  ....
else
  ....
fi
大多数情况下，可以使用测试命令来对条件进行测试，比如可以比较字符串、判断文件是否存在及是否可读等等……通常用" [ ] "来表示条件测试，注意这里的空格很重要，要确保方括号前后的空格。

[ -f "somefile" ] ：判断是否是一个文件
[ -x "/bin/ls" ] ：判断/bin/ls是否存在并有可执行权限
[ -n "$var" ] ：判断$var变量是否有值
[ "$a" = "$b" ] ：判断$a和$b是否相等
执行man test可以查看所有测试表达式可以比较和判断的类型。下面是一个简单的if语句：

#!/bin/bash

if [ ${SHELL} = "/bin/bash" ]; then
   echo "your login shell is the bash (bourne again shell)"
else
   echo "your login shell is not bash but ${SHELL}"
fi
变量$SHELL包含有登录shell的名称，我们拿它和/bin/bash进行比较以判断当前使用的shell是否为bash。

if[ EXCEPTION ]
fi
EXCEPTION 示例（可以用 man test）
 	( EXPRESSION )	EXPRESSION is true
       ! EXPRESSION		EXPRESSION is false
       EXPRESSION1 -a EXPRESSION2		both EXPRESSION1 and EXPRESSION2 are true
       EXPRESSION1 -o EXPRESSION2		either EXPRESSION1 or EXPRESSION2 is true
       -n STRING		the length of STRING is nonzero	       
	STRING equivalent to -n STRING
       -z STRING		the length of STRING is zero
       STRING1 = STRING2 	the strings are equal
       STRING1 != STRING2 	the strings are not equal
       INTEGER1 -eq INTEGER2	INTEGER1 is equal to INTEGER2
       INTEGER1 -ge INTEGER2	INTEGER1 is greater than or equal to INTEGER2
       INTEGER1 -gt INTEGER2	INTEGER1 is greater than INTEGER2
       INTEGER1 -le INTEGER2	INTEGER1 is less than or equal to INTEGER2
       INTEGER1 -lt INTEGER2	INTEGER1 is less than INTEGER2
       INTEGER1 -ne INTEGER2	INTEGER1 is not equal to INTEGER2
       FILE1 -ef FILE2		FILE1 and FILE2 have the same device and inode numbers
       FILE1 -nt FILE2		FILE1 is newer (modification date) than FILE2
       FILE1 -ot FILE2		FILE1 is older than FILE2
       -b FILE		FILE exists and is block special
       -c FILE		FILE exists and is character special
       -d FILE		FILE exists and is a directory
       -e FILE		FILE exists
       -f FILE		FILE exists and is a regular file
       -g FILE		FILE exists and is set-group-ID
       -G FILE		FILE exists and is owned by the effective group ID
       -h FILE		FILE exists and is a symbolic link (same as -L)
       -k FILE		FILE exists and has its sticky bit set
       -L FILE		FILE exists and is a symbolic link (same as -h)
       -O FILE		FILE exists and is owned by the effective user ID
       -p FILE		FILE exists and is a named pipe
       -r FILE		FILE exists and read permission is granted
       -s FILE		FILE exists and has a size greater than zero
       -S FILE		FILE exists and is a socket
       -t FD  		file descriptor FD is opened on a terminal
       -u FILE		FILE exists and its set-user-ID bit is set
       -w FILE		FILE exists and write permission is granted
       -x FILE		FILE exists and execute (or search) permission is grante


 && 和 || 操作符
熟悉C语言的朋友可能会喜欢下面的表达式：

[ -f "/etc/shadow" ] && echo "This computer uses shadow passwords"
这里的 && 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句，你也可以把它看作逻辑运算里的与操作。上述脚本表示如果/etc/shadow文件存在，则打印“This computer uses shadow passwords”。同样shell编程中还可以用或操作(||)，例如：

#!/bin/bash

mailfolder=/var/spool/mail/james
[ -r "$mailfolder" ] || { echo "Can not read $mailfolder" ; exit 1; }
echo "$mailfolder has mail from:"
grep "^From " $mailfolder
该脚本首先判断mailfolder是否可读，如果可读则打印该文件中的"From" 一行。如果不可读则或操作生效，打印错误信息后脚本退出。需要注意的是，这里我们必须使用如下两个命令：

-打印错误信息
-退出程序
我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用；普通函数稍后再作说明。即使不用与和或操作符，我们也可以用if表达式完成任何事情，但是使用与或操作符会更便利很多 。

 case 语句
case表达式可以用来匹配一个给定的字符串，而不是数字（可别和C语言里的switch...case混淆）。

case ... in
   ...) do something here 
   ;;
esac
file命令可以辨别出一个给定文件的文件类型，如：file lf.gz，其输出结果为：

lf.gz: gzip compressed data, deflated, original filename,
last modified: Mon Aug 27 23:09:18 2001, os: Unix
我们利用这点写了一个名为smartzip的脚本，该脚本可以自动解压bzip2, gzip和zip 类型的压缩文件：

 #!/bin/bash

 ftype="$(file "$1")"
 case "$ftype" in
 "$1: Zip archive"*)
    unzip "$1" ;;
 "$1: gzip compressed"*)
    gunzip "$1" ;;
 "$1: bzip2 compressed"*)
    bunzip2 "$1" ;;
 *) echo "File $1 can not be uncompressed with smartzip";;
 esac
你可能注意到上面使用了一个特殊变量$1，该变量包含有传递给该脚本的第一个参数值。也就是说，当我们运行：

smartzip articles.zip
$1 就是字符串 articles.zip。

 select 语句
select表达式是bash的一种扩展应用，擅长于交互式场合。用户可以从一组不同的值中进行选择：

select var in ... ; do
　break;
done
.... now $var can be used ....

下面是一个简单的示例：

#!/bin/bash

echo "What is your favourite OS?"
select var in "Linux" "Gnu Hurd" "Free BSD" "Other"; do
  break;
done
echo "You have selected $var"
该脚本的运行结果如下：

What is your favourite OS?
1) Linux
2) Gnu Hurd
3) Free BSD
4) Other
#? 1
You have selected Linux
 while/for 循环
在shell中，可以使用如下循环：

while ...; do
   ....
done
只要测试表达式条件为真，则while循环将一直运行。关键字"break"用来跳出循环，而关键字”continue”则可以跳过一个循环的余下部分，直接跳到下一次循环中。

for循环会查看一个字符串列表（字符串用空格分隔），并将其赋给一个变量：

for var in ....; do
   ....
done
下面的示例会把A B C分别打印到屏幕上：

#!/bin/bash

for var in A B C ; do
   echo "var is $var"
done
下面是一个实用的脚本showrpm，其功能是打印一些RPM包的统计信息：

#!/bin/bash

# list a content summary of a number of RPM packages
# USAGE: showrpm rpmfile1 rpmfile2 ...
# EXAMPLE: showrpm /cdrom/RedHat/RPMS/*.rpm
for rpmpackage in "$@"; do
   if [ -r "$rpmpackage" ];then
      echo "=============== $rpmpackage =============="
      rpm -qi -p $rpmpackage
   else
      echo "ERROR: cannot read file $rpmpackage"
   fi
done
这里出现了第二个特殊变量$@，该变量包含有输入的所有命令行参数值。如果你运行showrpm openssh.rpm w3m.rpm webgrep.rpm，那么 "$@"(有引号) 就包含有 3 个字符串，即openssh.rpm, w3m.rpm和 webgrep.rpm。$*的意思是差不多的。但是只有一个字串。如果不加引号，带空格的参数会被截断。

 Shell里的一些特殊符号
 引号
在向程序传递任何参数之前，程序会扩展通配符和变量。这里所谓的扩展是指程序会把通配符（比如*）替换成适当的文件名，把变量替换成变量值。我们可以使用引号来防止这种扩展，先来看一个例子，假设在当前目录下有两个jpg文件：mail.jpg和tux.jpg。

#!/bin/bash

echo *.jpg
运行结果为：

mail.jpg tux.jpg
引号（单引号和双引号）可以防止通配符*的扩展：

#!/bin/bash

echo "*.jpg"
echo '*.jpg'
其运行结果为：



*.jpg
*.jpg
其中单引号更严格一些，它可以防止任何变量扩展；而双引号可以防止通配符扩展但允许变量扩展：

#!/bin/bash

echo $SHELL
echo "$SHELL"
echo '$SHELL'
运行结果为：

/bin/bash
/bin/bash
$SHELL
此外还有一种防止这种扩展的方法，即使用转义字符——反斜杆:\：

echo \*.jpg
echo \$SHELL
输出结果为：



*.jpg
$SHELL
 Here Document
当要将几行文字传递给一个命令时，用here document是一种不错的方法。对每个脚本写一段帮助性的文字是很有用的，此时如果使用here document就不必用echo函数一行行输出。Here document以 << 开头，后面接上一个字符串，这个字符串还必须出现在here document的末尾。下面是一个例子，在该例子中，我们对多个文件进行重命名，并且使用here document打印帮助：

#!/bin/bash

# we have less than 3 arguments. Print the help text:
if [ $# -lt 3 ] ; then
cat << HELP

ren -- renames a number of files using sed regular expressions USAGE: ren 'regexp' 'replacement' files...

EXAMPLE: rename all *.HTM files in *.html:
   ren 'HTM$' 'html' *.HTM

HELP                #这里HELP要顶格写，前面不能有空格或者TAB制表符。如果cat一行写成cat << -HELP，前边可以带TAB.
   exit 0
fi
OLD="$1"
NEW="$2"
# The shift command removes one argument from the list of
# command line arguments.
shift
shift
# $@ contains now all the files:
for file in "$@"; do
   if [ -f "$file" ] ; then
      newfile=`echo "$file" | sed "s/${OLD}/${NEW}/g"`
      if [ -f "$newfile" ]; then
　　　　   echo "ERROR: $newfile exists already"
      else
         echo "renaming $file to $newfile ..."
         mv "$file" "$newfile"
      fi
   fi
done
示例有点复杂，我们需要多花点时间来说明一番。第一个if表达式判断输入命令行参数是否小于3个 (特殊变量$# 表示包含参数的个数) 。如果输入参数小于3个，则将帮助文字传递给cat命令，然后由cat命令将其打印在屏幕上。打印帮助文字后程序退出。如果输入参数等于或大于3个，我们就将第一个参数赋值给变量OLD，第二个参数赋值给变量NEW。下一步，我们使用shift命令将第一个和第二个参数从参数列表中删除，这样原来的第三个参数就成为参数列表$*的第一个参数。然后我们开始循环，命令行参数列表被一个接一个地被赋值给变量$file。接着我们判断该文件是否存在，如果存在则通过sed命令搜索和替换来产生新的文件名。然后将反短斜线内命令结果赋值给newfile。这样我们就达到了目的：得到了旧文件名和新文件名。然后使用 mv命令进行重命名

 Shell里的函数
如果你写过比较复杂的脚本，就会发现可能在几个地方使用了相同的代码，这时如果用上函数，会方便很多。函数的大致样子如下：

functionname()
{
# inside the body $1 is the first argument given to the function
# $2 the second ...
body
}

函数没有必要声明。只要在执行之前出现定义就行

下面是一个名为xtitlebar的脚本，它可以改变终端窗口的名称。这里使用了一个名为help的函数，该函数在脚本中使用了两次：

#!/bin/bash

help()
{
cat << HELP
xtitlebar -- change the name of an xterm, gnome-terminal or kde konsole
USAGE: xtitlebar [-h] "string_for_titelbar"
OPTIONS: -h help text
EXAMPLE: xtitlebar "cvs"
HELP
exit 0
}
# in case of error or if -h is given we call the function help:
[ -z "$1" ] && help
[ "$1" = "-h" ] && help
# send the escape sequence to change the xterm titelbar:
echo -e "\033]0;$1\007"
# 
在脚本中提供帮助是一种很好的编程习惯，可以方便其他用户（和自己）使用和理解脚本。

 命令行参数
我们已经见过$* 和 $1, $2 ... $9 等特殊变量，这些特殊变量包含了用户从命令行输入的参数。迄今为止，我们仅仅了解了一些简单的命令行语法（比如一些强制性的参数和查看帮助的-h选项）。但是在编写更复杂的程序时，您可能会发现您需要更多的自定义的选项。通常的惯例是在所有可选的参数之前加一个减号，后面再加上参数值 (比如文件名)。

有好多方法可以实现对输入参数的分析，但是下面的使用case表达式的例子无疑是一个不错的方法。

#!/bin/bash
 
help()
{
   cat << HELP
   This is a generic command line parser demo.
   USAGE EXAMPLE: cmdparser -l hello -f -- -somefile1 somefile2
HELP
   exit 0
}
  
while [ -n "$1" ]; do
case "$1" in
   -h) help;shift 1;; # function help is called
   -f) opt_f=1;shift 1;; # variable opt_f is set
   -l) opt_l=$2;shift 2;; # -l takes an argument -> shift by 2
   --) shift;break;; # end of options
   -*) echo "error: no such option $1. -h for help";exit 1;;
   *) break;;
esac
done
 
echo "opt_f is $opt_f"
echo "opt_l is $opt_l"
echo "first arg is $1"
echo "2nd arg is $2"

你可以这样运行该脚本：

cmdparser -l hello -f -- -somefile1 somefile2

返回结果如下：

opt_f is 1
opt_l is hello
first arg is -somefile1
2nd arg is somefile2

这个脚本是如何工作的呢？脚本首先在所有输入命令行参数中进行循环，将输入参数与case表达式进行比较，如果匹配则设置一个变量并且移除该参数。根据unix系统的惯例，首先输入的应该是包含减号的参数。

 Shell脚本示例
 一般编程步骤
现在我们来讨论编写一个脚本的一般步骤。任何优秀的脚本都应该具有帮助和输入参数。写一个框架脚本（framework.sh），该脚本包含了大多数脚本需要的框架结构，是一个非常不错的主意。这样一来，当我们开始编写新脚本时，可以先执行如下命令：

cp framework.sh myscript
然后再插入自己的函数。

让我们来看看如下两个示例。

 二进制到十进制的转换
脚本 b2d 将二进制数 (比如 1101) 转换为相应的十进制数。这也是一个用expr命令进行数学运算的例子：

#!/bin/bash
# vim: set sw=4 ts=4 et:
help()
{
   cat << HELP
   
b2d -- convert binary to decimal
 
USAGE: b2d [-h] binarynum
 
OPTIONS: -h help text
 
EXAMPLE: b2d 111010
will return 58
HELP
   exit 0
}
 
error()
{
   # print an error and exit
   echo "$1"
   exit 1
}
 
lastchar()
{
   # return the last character of a string in $rval
   if [ -z "$1" ]; then
      # empty string
      rval=""
      return
   fi
   # wc puts some space behind the output this is why we need sed:
   numofchar=`echo -n "$1" | sed 's/ //g' | wc -c `
   # now cut out the last char
   rval=`echo -n "$1" | cut -b $numofchar`
}
 
chop()
{
   # remove the last character in string and return it in $rval
   if [ -z "$1" ]; then
      # empty string
      rval=""
      return
   fi
   # wc puts some space behind the output this is why we need sed:
   numofchar=`echo -n "$1" | wc -c | sed 's/ //g' `
   if [ "$numofchar" = "1" ]; then
      # only one char in string
      rval=""
      return
   fi
   numofcharminus1=`expr $numofchar "-" 1`
   # now cut all but the last char:
   rval=`echo -n "$1" | cut -b -$numofcharminus1` 
   #原来的 rval=`echo -n "$1" | cut -b 0-${numofcharminus1}`运行时出错.
   #原因是cut从1开始计数，应该是cut -b 1-${numofcharminus1}
}
 
while [ -n "$1" ]; do
case $1 in
   -h) help;shift 1;; # function help is called
   --) shift;break;; # end of options
   -*) error "error: no such option $1. -h for help";;
   *) break;;
esac
done

# The main program
sum=0
weight=1
# one arg must be given:
[ -z "$1" ] && help
binnum="$1"
binnumorig="$1"
 
while [ -n "$binnum" ]; do
   lastchar "$binnum"
   if [ "$rval" = "1" ]; then
      sum=`expr "$weight" "+" "$sum"`
   fi
   # remove the last position in $binnum
   chop "$binnum"
   binnum="$rval"
   weight=`expr "$weight" "*" 2`
done
 
echo "binary $binnumorig is decimal $sum"
#

该脚本使用的算法是利用十进制和二进制数权值 (1,2,4,8,16,..)，比如二进制"10"可以这样转换成十进制：

0 * 1 + 1 * 2 = 2

为了得到单个的二进制数我们是用了lastchar 函数。该函数使用wc –c计算字符个数，然后使用cut命令取出末尾一个字符。Chop函数的功能则是移除最后一个字符。

 文件循环拷贝
你可能有这样的需求并一直都这么做：将所有发出邮件保存到一个文件中。但是过了几个月之后，这个文件可能会变得很大以至于该文件的访问速度变慢；下面的脚本 rotatefile 可以解决这个问题。这个脚本可以重命名邮件保存文件（假设为outmail）为outmail.1，而原来的outmail.1就变成了 outmail.2 等等...

#!/bin/bash
# vim: set sw=4 ts=4 et:
 
ver="0.1"
help()
{
   cat << HELP
   rotatefile -- rotate the file name
   USAGE: rotatefile [-h] filename
   OPTIONS: -h help text
   EXAMPLE: rotatefile out

   This will e.g rename out.2 to out.3, out.1 to out.2, out to out.1[BR]
   and create an empty out-file
 
   The max number is 10
 
   version $ver
HELP

   exit 0
}
 
error()
{
   echo "$1"
   exit 1
}
 
while [ -n "$1" ]; do
   case $1 in
      -h) help;shift 1;;
      --) break;;
      -*) echo "error: no such option $1. -h for help";exit 1;;
      *) break;;
   esac
done
 
# input check:
if [ -z "$1" ] ; then
   error "ERROR: you must specify a file, use -h for help"
fi
 
filen="$1"
# rename any .1 , .2 etc file:
for n in 9 8 7 6 5 4 3 2 1; do
   if [ -f "$filen.$n" ]; then
      p=`expr $n + 1`
      echo "mv $filen.$n $filen.$p"
      mv $filen.$n $filen.$p
   fi
done
 
# rename the original file:
if [ -f "$filen" ]; then
   echo "mv $filen $filen.1"
   mv $filen $filen.1
fi
 
echo touch $filen
touch $filen

这个脚本是如何工作的呢？在检测到用户提供了一个文件名之后，首先进行一个9到1的循环；文件名.9重命名为文件名.10，文件名.8重命名为文件名. 9……等等。循环结束之后，把原始文件命名为文件名.1，同时创建一个和原始文件同名的空文件（touch $filen）

 脚本调试
最简单的调试方法当然是使用echo命令。你可以在任何怀疑出错的地方用echo打印变量值，这也是大部分shell程序员花费80%的时间用于调试的原因。Shell脚本的好处在于无需重新编译，而插入一个echo命令也不需要多少时间。

shell也有一个真正的调试模式，如果脚本"strangescript"出错，可以使用如下命令进行调试：

sh -x strangescript
7 上述命令会执行该脚本，同时显示所有变量的值。

shell还有一个不执行脚本只检查语法的模式，命令如下：

sh -n your_script
这个命令会返回所有语法错误。

我们希望你现在已经可以开始编写自己的shell脚本了，尽情享受这份乐趣吧！ :)


bash 数组操作
1.数组定义

 

[chengmo@centos5 ~]$ a=(1 2 3 4 5)
[chengmo@centos5 ~]$ echo $a
1

 

一对括号表示是数组，数组元素用“空格”符号分割开。

 

2.数组读取与赋值

得到长度：
[chengmo@centos5 ~]$ echo ${#a[@]}
5

用${#数组名[@或*]} 可以得到数组长度

读取：
[chengmo@centos5 ~]$ echo ${a[2]} 
3

[chengmo@centos5 ~]$ echo ${a[*]} 
1 2 3 4 5   

用${数组名[下标]} 下标是从0开始  下标是：*或者@ 得到整个数组内容

赋值:
[chengmo@centos5 ~]$ a[1]=100

[chengmo@centos5 ~]$ echo ${a[*]} 
1 100 3 4 5

 

[chengmo@centos5 ~]$ a[5]=100     
[chengmo@centos5 ~]$ echo ${a[*]}

1 100 3 4 5 100

直接通过 数组名[下标] 就可以对其进行引用赋值，如果下标不存在，自动添加新一个数组元素

删除:
[chengmo@centos5 ~]$ a=(1 2 3 4 5)
[chengmo@centos5 ~]$ unset a
[chengmo@centos5 ~]$ echo ${a[*]}

[chengmo@centos5 ~]$ a=(1 2 3 4 5)
[chengmo@centos5 ~]$ unset a[1]   
[chengmo@centos5 ~]$ echo ${a[*]} 
1 3 4 5
[chengmo@centos5 ~]$ echo ${#a[*]}
4

直接通过：unset 数组[下标] 可以清除相应的元素，不带下标，清除整个数据。


3.特殊使用

分片:
[chengmo@centos5 ~]$ a=(1 2 3 4 5)
[chengmo@centos5 ~]$ echo ${a[@]:0:3}
1 2 3
[chengmo@centos5 ~]$ echo ${a[@]:1:4}
2 3 4 5

[chengmo@centos5 ~]$ c=(${a[@]:1:4})
[chengmo@centos5 ~]$ echo ${#c[@]}
4
[chengmo@centos5 ~]$ echo ${c[*]} 
2 3 4 5

直接通过 ${数组名[@或*]:起始位置:长度} 切片原先数组，返回是字符串，中间用“空格”分开，因此如果加上”()”，将得到切片数组，上面例子：c 就是一个新数据。

替换:
[chengmo@centos5 ~]$ a=(1 2 3 4 5)    
[chengmo@centos5 ~]$ echo ${a[@]/3/100}
1 2 100 4 5
[chengmo@centos5 ~]$ echo ${a[@]}
1 2 3 4 5
[chengmo@centos5 ~]$ a=(${a[@]/3/100}) 
[chengmo@centos5 ~]$ echo ${a[@]}     
1 2 100 4 5

调用方法是：${数组名[@或*]/查找字符/替换字符} 该操作不会改变原先数组内容，如果需要修改，可以看上面例子，重新定义数据。

数组最后添加元素,相当与重新定义数组
a=(${a[@]} aaa)
或者
a=(${a[*]} aaa})

在数组中间某个位置添加元素
a=(${a[*]:0:2} center ${a[*]:2:${#a[*]}})


bash变量作用域
	shell和方法中声明的变量默认为global，作用域从声明开始，到shell结束或者到执行unset
	shell方法参数和shell方法中声明为local的变量，作用域为该函数
bash函数
	function methodname（）｛
	｝
	或者
	methodname(){
	}
	不带任何参数，函数的返回值只能为整数[0-255],0表示没有错误，其他任何值表明有错误
	参数处理-Shell传入参数的处理
	1. $# 传递到脚本的参数个数
	2. $* 以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个
	3. $$ 脚本运行的当前进程ID号
	4. $! 后台运行的最后一个进程的进程ID号
	5. $@ 与$*相同，但"$*" 和 "$@"(加引号)并不同，"$*"将所有的参数解释成一个字符串，而"$@"是一个参数数组。如下例所示：
	6. $- 显示shell使用的当前选项，与set命令功能相同
	7. $? 上一条命令执行后返回的值。0表示没有错误，其他任何值表明有错误。（函数返回结果通过$?获得，直接用=获取的值为空）
	变量 含义 
	$0 脚本名字 
	$1 位置参数 #1 
	$2 - $9 位置参数 #2 - #9 
	${10} 位置参数 #10 
	$# 位置参数的个数 
	"$*" 所有的位置参数(作为单个字符串) * 
	"$@" 所有的位置参数(每个都作为独立的字符串) 
	${#*} 传递到脚本中的命令行参数的个数 
	${#@} 传递到脚本中的命令行参数的个数 
	$? 返回值 
	$$ 脚本的进程ID(PID) 
	$- 传递到脚本中的标志(使用set) 
	$_ 之前命令的最后一个参数 
	$! 运行在后台的最后一个作业的进程ID(PID)


	$@与$*只有在""中才有区别
	"$@" 則可得到 "p1" "p2 p3" "p4" 這三個不同的詞段(word)﹔
	"$*" 則可得到 "p1 p2 p3 p4" 這一整串單一的詞段。



    for i in `ls`;do echo -e "\t"vendor/imotor/3rd-party/Amap/system/app/Amap/lib/arm/$i:system/app/Amap/lib/arm/$i" \\" ; done > /tmp/1.txt


