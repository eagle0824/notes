1	ubuntu git安装

	linux下软件的安装方式有多种，最简单的莫过于从软件中心直接安装了或者用命令行直接安装
		sudo apt-get install git

	       但是这样的安装却使我们体会不到最新版本的功能，如果我们想要体验最新的，或者修改源代码，就必须编译安装了。我们可以直接在git 的官网
	上下载并安装。
	编译之前，我们必须首先安装以下软件，否则会编译不通过。
		sudo apt-get install libcurl4-openssl-dev  libexpat1-dev
		安装完后我们边可以编译了，当然编译之前我们必须进入源码所在的目录，至于怎么进，大家就自己解决吧，进入后执行下面命令进行编译：
		make prefix=/usr/local all
		最后执行
		sudo make prefix=/usr/local install
		进行安装。
	最高明的方法还是我们自己在本地克隆一个git版本库，当然前提是你自己已经安装了git的否则的话，这种方发你是用不了的，克隆版本库：
		首先进入你要存放的目录，当然也可以不进入，git clone 默认的第二个参数就是你的路径，省略的话就是你当前的路径：
		git clone git://git.kernel.org/pub/scm/git/git.git
		克隆后默认会检出（checkout）当前最新的代码当然你也可以装以往的版本,执行下面命令可以检查出历史所有的版本
		git tag
		比如我当下想检出v1.7.8.2，这个版本，我只需执行以下命令就行：
		git checkout v1.7.8.2
		检出后我们就可以使用上面介绍的方法进行编译了　　


2	git配置

	//查看当前配置
	git config -l
	git config --list

	//设置用户名
	git config --global user.name "your name"
	//设置用户邮箱
	git config --global user.email xxxx@163.com

	//打开.git/config文件编辑
	git config -e
	git config -edit

	//定义别名co为checkout,执行git co branch1相当与git checkout branch1
	git config alias.co checkout

    git config --global core.editor vim  用vim作为编辑gitconfig的默认工具
 	git config --global -e	打开~/.gitconfig文件并编辑

    git 颜色设置
    git config --global color.status auto
    git config --global color.diff auto
    git config --global color.branch auto
    git config --global color.interactive auto

1	git常用命令

	git checkout <file>	撤销修改文件
	git add <file>	将文件添加到暂存区


	git reset <file>	将文件从暂存区,移除

	git commit 		将暂存区提交到本地仓库


	git commit -a -m "messge"	-a将缓存区修改或删除的文件,但新建的文件不会自动,直接存储(相当于执行git add/rm)
	git commit --amend -m "覆盖上一次提交"
	git remote -v 查看远程服务器详情
	git log -p --stat -n 查看最近n次提交的详情,并统计修改行数(stat)
	git log --pretty=oneline	以单行显示每次提交记录

	git checkout file	撤销本地修改	git add	添加本地修改到暂存区域
	git reset file	撤销暂存区域修改	git commit	暂存区修改提交到本地代码仓库

    git push <远程主机名> <本地分支名>:<远程分支名>
	git push 本地代码仓库提交到远程代码仓库
	git push orign branchname	提交到指定仓库

	git revert	撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交
	git revert HEAD                  撤销前一次 commit
	git revert HEAD^               撤销前前一次 commit
	git revert commit-id （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。
	git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容

	git remote add mmsinit git@10.11.100.101:aaa/code2/packages/apps/Contacts.git
	git fetch mmsinit(远程数据库别名)
	并未与本地分支合并

	默认情况下git clone 命令本质上就是自动创建了本地的master 分支用于跟踪远程仓库中的master 分支
	git clone git....... -b branch	将远程分支branch中的内容创建本地分支
	git pull	自动将远程master分支与本地分支合并
    git pull <远程主机名> <远程分支名>:<本地分支名>

	别名 git config --global alias.last 'log -1 HEAD'
	则 git log -1 等价于	git last

	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.ci commit
	git config --global alias.st status

	gitk 是git log可视化工具(可通过以下命令安装sudo apt-get install gitk)
	git config --global alias.visual '!gitk'
	git visual


	分支
	git branch			查看分支
	git branch local(分支名)	创建local分支
	git checkout local(分支名)	切换到local分支
	git checkout -b local	创建并切换到local分支

	git merge local		在master分支下,merge local分支
	git mergetool			若merge有冲突,可以用此命令,引导我们用可视化工具修改冲突
	git branch -d locat		删除local分支


	管理分支
	git branch 			查看当前所有分支(*标记当前分支)
	git branch -v 		查看各分支最后一次提交的信息
	git branch --no-merged	查看没有合并的分支
	git branch --merged		查看当前合并的分支

	生成ssh密钥
	ssh-keygen


	git stash命令
	如果要增添新的功能，改了部分文件，但是还没有完成，此时，有一个比较紧急的bug要解，
	可以用git stash命令，将当前修改暂存，回到上次commit状态，修改完bug，
	提交之后用命令，git stash pop恢复之前添加功能修改的文件。。继续修改

	git stash 将当前改动添加添加到暂存区，返回到上一个commit的修改
	git stash clear	清空当前暂存区
	git stash pop 	恢复第一个暂存版本
	git stash list	查看当前暂存区暂存所有版本

	stash@{0}: WIP on master: 562c812 lllupdate for a.txt
	stash@{1}: WIP on master: 562c812 lllupdate for a.txt
	git stash apply stash@{1}	若多个stash缓存，相恢复第二个，但是stash还存在
	git stash drop stash@{0}    将0号stash删除


2	git做patch
	(1)	根据提交做patch
		git format-patch -s -99999 -o path		获取所有patch
		git format-patch -s -1 -o path		获取最后一次提交的patch
		git format-patch -1 3b7fd25c71877b287251a3336b398b72f6b4503d 	取3b7fd25c71877b287251a3336b398b72f6b4503d生成一个patch
		git format-patch -n 3b7fd25c71877b287251a3336b398b72f6b4503d   包含3b7fd25c71877b287251a3336b398b72f6b4503d提交之前的n次提交

		git format-patch -s 3b7fd25c71877b287251a3336b398b72f6b4503d   3b7fd25c71877b287251a3336b398b72f6b4503d此次提交之后的patch


	(2)	根据tag差异做patch
		git tag -l
		git diff android-sdk-2.2_r2 android-sdk-2.3.4_r1 >path

	(3)	根据commit差异做patch
		git log
		git diff 0c34b8e3a25173c8c4542e034d602d96a0c8eb68  d60ae78a0c217ef764f0a3775459fae30a97f7ea > ~/patch/0001112.patch


	git 打patch
	git am --abort		清除以前am信息
	git am path/patchname	打某一个patch或某个文件下patch



	git format-patch -1 -o /tmp/	最后一次提交生成一个patch到目录/tmp/下面
	git am /tmp/patchname


    window环境下生成的patch在linux上打不上的时候用
    git am --ignore-space-change --ignore-whitespace ./paches/* 

    git diff > tmp.diff     git diff 生成patch
    git apply tmp.diff      git apply 将tmp.diff 恢复


	回退到commit_id版本，在commid_id版本之后，最后一次提交和commit_id之间修改信息被reset
	git reset --hard 1347c07eb6e615383225557f9f8fdb67c3354196

	回退到commit_id版本，在commid_id版本之后，最后一次提交和commit_id之间修改信息保存到暂存区
	git reset 1347c07eb6e615383225557f9f8fdb67c3354196

	git revert

    最后一次提交文件压缩
    git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)

    两次提交之间修改的文件压缩
    git archive -o ../latest.zip NEW_COMMIT_ID_HERE $(git diff --name-only OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)

3	git .gitignore 文件示例
	# 此为注释– 将被Git 忽略
	*.a # 忽略所有.a 结尾的文件
	!lib.a # 但lib.a 除外
	/TODO # 仅仅忽略项目根目录下的TODO 文件，不包括subdir/TODO
	build/ # 忽略build/ 目录下的所有文件
	doc/*.txt # 会忽略doc/notes.txt 但不包括doc/server/arch.txt

	android应用项目中 .gitignore示例,创建.gitignore文件
	*~
	*.swp
	bin/
	gen/
	.classpath
	.project
	project.properties
	.gitignore


4	git diff	已暂存和未暂存之间的区别
	git diff --cached(--staged)	已经暂存(git add)和上次提交之间的差异

	git commit --amend	修改最后一次提交信息,或文件
	若只是修改最后一次提交信息,直接命令就可以,或者加-m参数	git commit --amend -m newmessage
	若是要修改之前提交的文件,则修改后先git add 然后再执行	git commit --amend -m newmessage

	git commit 之后想要查看提交的差异
	git log 取出commit上次提交信息  45erewerwerwerwerw...
	git diff 45erewerwerwerwerw... 	表示取最后一次提交(即本地数据库)与上次提交之间的差异
	git diff master 比较当前分支与master分支之间的差异
	git diff master dir/	比较当前分支与master分支dir/目录下的差异

5	git branch			查看当前分支(-a 显示所有)
	git branch -v			查看各分支最后一次提交的信息
	git checkout branchName 	切换到分支branchName
	git merge master		将当前master到merge到当前分支
	git branch -d branchName 	删除分支branchName
    git checkout -b branch2  从当前所在分支，创建一个新的分支branch2
	merge过程中如果有冲突
	git status 	查看

6	在本地master上分支作了一个commit,如何放到本地的old_cc分支上
	切换到old_cc
	git checkout old_cc
	git cherry-pick <command id>
	git cherry-pick branch_name 	cherry-pick branch_name的最后一次提交
	若出现冲突
	git status 手动解决
        git checkout commitid -b branch_name 当前分支获取到commideid生成一个新的分支branch_name

7	分支的合并git merge 与git rebase的区别
	若将a分支中的内容合并到b分支中
	git checkout b	切换到b分支
	git merge a		合并a分支到b分支(所有操作一起合并,若有冲突一起处理)


	git checkout b	切换到b分支
	git rebase a		合并a分支到b分支

	git rebase --continue	处理完冲突继续合并
	git rebase --skip		处理完冲突,跳过
	git rebase --abort		撤销合并


8	git push origin localbranch:newbranch 用本地分支localbranch在服务器上创建新的分支newbranch
    git push origin :newbranch    删除服务器上的分支newbranch，本地分支仍旧存在


9   git filter-branch

    git filter-branch -f --env-filter "GIT_AUTHOR_NAME='eagle'; GIT_AUTHOR_EMAIL='l22k77@163.com'; GIT_COMMITTER_NAME='eagle'; GIT_COMMITTER_EMAIL='l22k77@163.com';"
    修改已经提交过提交记录的信息

    若已经未提交到服务器用git push origin master
    若修改已经提交到服务器的提交记录用 git push -f origin master


10 将已有分支移动到其它服务器分支
    git remote add ac gitolite@192.168.0.200:autochips/packages/apps/TaskManager.git
    git fetch ac
    git push ac clwbase:master
    git checkout -b master ac/master

    将已有仓库移动到另一仓库
    cd repository
    git remote rm origin
    git remote add origin gitolite@aaaaaa:repository.git
    git push origin master

    如果有多个分支,要将某一个分支,提交到服务器
    git push origin <branch-name>


Git 是分散式的版本控制系統, 從架設、簡易操作、設定, 此篇主要是整理 基本操作、遠端操作 等.

註: Git 的範圍太廣了, 把這篇當作是初學入門就好了.


注意事項
由 project/.git/config 可知: (若有更多, 亦可由此得知)

origin(remote) 是 Repository 的版本
      * master(branch) 是 local 端, 正在修改的版本
      *
平常沒事不要去動到 origin, 如果動到, 可用 git reset --hard 回覆到沒修改的狀態.

Git 新增檔案
	* git add . # 將資料先暫存到 staging area, add 之後再新增的資料, 於此次 commit 不會含在裡面.
      * git add filename
      * git add modify-file # 修改過的檔案, 也要 add. (不然 commit 要加上 -a 的參數)
      * git add -u # 只加修改過的檔案, 新增的檔案不加入.
      * git add -i # 進入互動模式
Git 刪除檔案
	git rm filename
Git 修改檔名、搬移目錄
	git mv filename new-filename
Git status 看目前的狀態
	git status # 看目前檔案的狀態
Git Commit
	git commit
      * git commit -m 'commit message'
      * git commit -a -m 'commit -message' # 將所有修改過得檔案都 commit, 但是 新增的檔案 還是得要先 add.
      * git commit -a -v # -v 可以看到檔案哪些內容有被更改, -a 把所有修改的檔案都 commit
Git 產生新的 branch
	git branch # 列出目前有多少 branch
      * git branch new-branch # 產生新的 branch (名稱: new-branch), 若沒有特別指定, 會由目前所在的 branch / master 直接複製一份.
      * git branch new-branch master # 由 master 產生新的 branch(new-branch)
      * git branch new-branch v1 # 由 tag(v1) 產生新的 branch(new-branch)
      * git branch -d new-branch # 刪除 new-branch
      * git branch -D new-branch # 強制刪除 new-branch
      * git checkout -b new-branch test # 產生新的 branch, 並同時切換過去 new-branch
與 remote repository 有關
      * git branch -r # 列出所有 Repository branch
      * git branch -a # 列出所有 branch
Git checkout 切換 branch
	git checkout branch-name # 切換到 branch-name
      * git checkout master # 切換到 master
      * git checkout -b new-branch master # 從 master 建立新的 new-branch, 並同時切換過去 new-branch
      * git checkout -b newbranch # 由現在的環境為基礎, 建立新的 branch
      * git checkout -b newbranch origin # 於 origin 的基礎, 建立新的 branch
      * git checkout filename # 還原檔案到 Repository 狀態
      * git checkout HEAD . # 將所有檔案都 checkout 出來(最後一次 commit 的版本), 注意, 若有修改的檔案都會被還原到上一版. (git checkout -f 亦可)
      * git checkout xxxx . # 將所有檔案都 checkout 出來(xxxx commit 的版本, xxxx 是 commit 的編號前四碼), 注意, 若有修改的檔案都會被還原到上一版.
      * git checkout -- * # 恢復到上一次 Commit 的狀態(* 改成檔名, 就可以只恢復那個檔案)
Git diff
	git diff master # 與 Master 有哪些資料不同
      * git diff --cached # 比較 staging area 跟本來的 Repository
      * git diff tag1 tag2 # tag1, 與 tag2 的 diff
      * git diff tag1:file1 tag2:file2 # tag1, 與 tag2 的 file1, file2 的 diff
      * git diff # 比較 目前位置 與 staging area
      * git diff --cached # 比較 staging area 與 Repository 差異
      * git diff HEAD # 比較目前位置 與 Repository 差別
      * git diff new-branch # 比較目前位置 與 branch(new-branch) 的差別
      * git diff --stat
Git Tag
	git tag v1 ebff # log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容, 設定簡短好記得 Tag: v1
      * git tag 中文 ebff # tag 也可以下中文, 任何文字都可以
      * git tag -d 中文 # 把 tag=中文 刪掉

      添加tag
      git tag -a v1.1 -m "new release"

      对之前某次提交添加标签
      git tag -a v1.1 commitid

      tag push 到服务器
      git push --tags

      删除本地tag
      git tag -d v1.1

      删除服务器tag
      git push origin :refs/tags/v1.1
      或者 git push origin :v1.1

      察看本地tag
      git tag -l

      切换到某一个tag并创建新的分支
      git checkout v1.1 -b new_branch_name

Git log
	git log # 將所有 log 秀出
      * git log --all # 秀出所有的 log (含 branch)
      * git log -p # 將所有 log 和修改過得檔案內容列出
      * git log -p filename # 將此檔案的 commit log 和 修改檔案內容差異部份列出
      * git log --name-only # 列出此次 log 有哪些檔案被修改
      * git log --stat --summary # 查每個版本間的更動檔案和行數
      * git log filename # 這個檔案的所有 log
      * git log directory # 這個目錄的所有 log
      * git log -S'foo()' # log 裡面有 foo() 這字串的.
      * git log --no-merges # 不要秀出 merge 的 log
      * git log --since="2 weeks ago" # 最後這 2週的 log
      * git log --pretty=oneline # 秀 log 的方式
      * git log --pretty=short # 秀 log 的方式
      * git log --pretty=format:'%h was %an, %ar, message: %s'
      * git log --pretty=format:'%h : %s' --graph # 會有簡單的文字圖形化, 分支等.
      * git log --pretty=format:'%h : %s' --topo-order --graph # 依照主分支排序
      * git log --pretty=format:'%h : %s' --date-order --graph # 依照時間排序
Git show
	git show ebff # 查 log 是 commit ebff810c461ad1924fc422fd1d01db23d858773b 的內容
      * git show v1 # 查 tag:v1 的修改內容
      * git show v1:test.txt # 查 tag:v1 的 test.txt 檔案修改內容
      * git show HEAD # 此版本修改的資料
      * git show HEAD^ # 前一版修改的資料
      * git show HEAD^^ # 前前一版修改的資料
      * git show HEAD~4 # 前前前前一版修改的資料
      * Git reset 還原
git reset --hard HEAD # 還原到最前面
      * git reset --hard HEAD~3
      * git reset --soft HEAD~3
      * git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)
Git grep
	git grep "te" v1 # 查 v1 是否有 "te" 的字串
      * git grep "te" # 查現在版本是否有 "te" 的字串

Git stash 暫存
      * git stash # 丟進暫存區
      * git stash list # 列出所有暫存區的資料
      * git stash pop # 取出最新的一筆, 並移除.
      * git stash apply # 取出最新的一筆 stash 暫存資料. 但是 stash 資料不移除
      * git stash clear # 把 stash 都清掉

Git merge 合併
      * git merge
      * git merge master
      * git merge new-branch
       * 下述轉載自: ihower 的 Git 版本控制系統(2) 開 branch 分支和操作遠端 repo.x
      * Straight merge 預設的合併模式，會有全部的被合併的 branch commits 記錄加上一個 merge-commit，看線圖會有兩條 Parents 線，並保留所有 commit log。
              * Squashed commit 壓縮成只有一個 merge-commit，不會有被合併的 log。SVN 的 merge 即是如此。
              * cherry-pick 只合併指定的 commit
              * rebase 變更 branch 的分支點：找到要合併的兩個 branch 的共同的祖先，然後先只用要被 merge 的 branch 來 commit 一遍，然後再用目前 branch 再 commit 上去。這方式僅適合還沒分享給別人的 local branch，因為等於砍掉重練 commit log。
              *
        指令操作

        git merge <branch_name> # 合併另一個 branch，若沒有 conflict 衝突會直接 commit。若需要解決衝突則會再多一個 commit。
              * git merge --squash <branch_name> # 將另一個 branch 的 commit 合併為一筆，特別適合需要做實驗的 fixes bug 或 new feature，最後只留結果。合併完不會幫你先 commit。
              * git cherry-pick 321d76f # 只合併特定其中一個 commit。如果要合併多個，可以加上 -n 指令就不會先幫你 commit，這樣可以多 pick幾個要合併的 commit，最後再 git commit 即可。
              * Git blame
git blame filename # 關於此檔案的所有 commit 紀錄
      * Git 還原已被刪除的檔案
git ls-files -d # 查看已刪除的檔案
      * git ls-files -d | xargs git checkout -- # 將已刪除的檔案還原
      * Git 維護
git gc # 整理前和整理後的差異, 可由: git count-objects 看到.
      * git fsck --full
      * Git revert 資料還原
git revert HEAD # 回到前一次 commit 的狀態
      * git revert HEAD^ # 回到前前一次 commit 的狀態
      * git reset HEAD filename # 從 staging area 狀態回到 unstaging 或 untracked (檔案內容並不會改變)
      * git checkout filename # 從 unstaging 狀態回到最初 Repository 的檔案(檔案內容變回修改前)
      * Git Rollback 還原到上一版
git reset --soft HEAD^
      * 編輯 + git add filename
      * git commit -m 'rollback'
      *
以下與 遠端 Repository 相關


Git remote 維護遠端檔案
git remote
      * git remote add new-branch http://git.example.com.tw/project.git # 增加遠端 Repository 的 branch(origin -> project)
      * git remote show # 秀出現在有多少 Repository
      * git remote rm new-branch # 刪掉
      * git remote update # 更新所有 Repository branch
      * git branch -r # 列出所有 Repository branch
      * 抓取 / 切換 Repository 的 branch
git fetch origin
      * git checkout --track -b reps-branch origin/reps-branch # 抓取 reps-branch, 並將此 branch 建立於 local 的 reps-branch
      * 刪除 Repository 的 branch
git push origin :heads/reps-branch
      *

